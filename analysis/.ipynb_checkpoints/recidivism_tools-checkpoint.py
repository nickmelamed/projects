'''This .py file contains all of the functions created for the recidivism analysis'''

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm


def create_dummy_range(lower, upper, prefix):
    '''Adds columns of indicator variables to an existing dataframe for the desired range. 
            
        Params:
            lower (int): The lower bound for the range
            upper (int): The upper bound for the range
            prefix (String): column name (e.g., Months Supervised) to be followed by specified grouping
  
    '''
    
    col_name = prefix + ": " + str(lower) + '-' + str(upper)
    less_dummies[col_name] = risk[prefix].apply(lambda x: 1 if x in np.arange(lower, upper+1) else 0) # 1 if in age group, o.w. 0
    
    

def dummy_mlr(variable):
    '''Creates a multiple linear regression object with Risk Ranking as the endogenous variable, and the desired variable as our exogenous variable, to determine the effect of the desired variable on Risk Ranking assignment.
    
    
    Params:
        variable (String): exogenous variable for the regression (e.g., Age)
    
    Returns:
        mlr (statsmodels.discrete.discrete_model.MultinomialResultsWrapper): MLR object that contains our coefficients
    
    '''
    mlr = sm.MNLogit(endog = risk_less_dummies.loc[:, ['Risk Ranking']],
                 exog = risk_less_dummies.loc[:, [col for col in risk_less_dummies if variable in col]]).fit() 
    # note we use a list comprehension to obtain all of the columns related to variable (e.g., for Age, we get all groupings)
    return mlr



def lifetable(df):
    
    ''' Creates a lifetable with right censoring from the original duration dataframe
    
        Params:
            df (DataFrame): Original dataframe (must contain duration at the very minimum)
        
        Returns: 
            lifetable (DataFrame): The right-censored life table
    
    '''
    
    df['D'] = df[['Survival Time (Months)']].notnull() # D is an indicator for observed duration
    df['Z'] = sample[['Survival Time (Months)']].apply(np.ceil) # Z is the survival time in months
    df['Z'].fillna(37, inplace = True) # right censoring at 37 months (observation ends at 36 months)
    df['Z'] = df['Z'].astype(int)
    
    grp = df.groupby('Z')
    lifetable = pd.DataFrame({"N_z": grp.size(), "Re-incarcerated": grp["D"].sum()})

    N = len(df)
    prior_count = lifetable["N_z"].cumsum().shift(1, fill_value=0)
    lifetable.insert(0, "At risk", N - prior_count) 

    lifetable["Censored"] = (lifetable["At risk"] - lifetable["At risk"].shift(-1, fill_value=0) - lifetable["Re-incarcerated"]) 

    lifetable.drop(['N_z'], axis=1, inplace = True)

    return lifetable



def kaplan_meier(lifetable):
    
    ''' Appends the Kaplan-Meier survival function and hazard function estimates to our lifetable 
    
        Params: 
            lifetable (DataFrame): a right-censored life table as generated by the lifetable(df) function
        
        ''' 
    
    lifetable['$\lambda(y)$'] = lifetable["Re-incarcerated"] / lifetable["At risk"] # hazard function estimate
    lifetable['$S(y)$'] = (1-lifetable['$\lambda(y)$']).cumprod() # survival function estimate
    lifetable.reset_index(inplace=True)
    
    

def ci_greenwood(lifetable):
    ''' Creates a 95% confidence interval of the Kaplan-Meier estimate
    
        Params:
            lifetable (Dataframe): right-censored life table with the Kaplan-Meier estimate generated by kaplan_meier(lifetable)
        
        Returns:
            (lower_ci, upper_ci) (tuple[float, float]): the 95% CI of the Kaplan-Meier estimate
            
    '''

    greenwood = df['$S(y)$'] * ((df['Re-incarcerated'] / (df['At risk'] * (df['At risk'] - df['Re-incarcerated']))).cumsum())**0.5
    upper_ci = df['$S(y)$'] + (1.96 * greenwood)
    lower_ci = df['$S(y)$'] - (1.96 * greenwood)
    return (lower_ci, upper_ci)



def plot_survival_hazard(df1, name1, df2, name2):
    
    ''' Plots the estimated survival functions with 95% CIs and the first quartile of the survival function on one graph, and the estimated hazard function on another graph, for the two given dataframes (e.g., comparing Male vs. Female)
    
        Params:
            df1: right-censored life table with Kaplan-Meier estimate from kaplan_meier(lifetable) for first group (e.g., Female)
            name1: Name of first group to be used in titles and legend lables
            df2: right-censored life table with Kaplan-Meier estimate from kaplan_meier(lifetable) for second group (e.g., Male)
            name2: Name of second group to be used in titles and legend lables
    '''

    fig_survival, sbp = plt.subplots(ncols=2, figsize=(8, 4))
    ax0 = sbp[0] 
    ax1 = sbp[1] 
    fig_survival.suptitle(f'Recidivism of {name1} vs. {name2}', fontsize=14)

    color = '#3B7EA1'                                                                        # Founder's Rock

    df1_quartile_1 = df1.loc[df1['$S(y)$'] <= 0.75].iloc[0]['Z']
    df2_quartile_1 = df2.loc[df2['$S(y)$'] <= 0.75].iloc[0]['Z']

    # Survival function
    ax0.set_xlabel(r'Months since release')
    ax0.set_ylabel(r'Surival function, $S(y)$')
    s = ax0.step(df1['Z'], df1['$S(y)$'], alpha = 0.75, where = 'post', label = f'{name1} $S(y)$', color = 'blue')
    s = ax0.step(df1['Z'], ci_greenwood(df1)[0], alpha = 0.75, where = 'post', color = 'green', linestyle = '--')
    s = ax0.step(df1['Z'], ci_greenwood(df1)[1], alpha = 0.75,
                 where = 'post', color = 'green', label = '95% CI', linestyle = '--')

    s = ax0.step(df2['Z'], df2['$S(y)$'], alpha = 0.75, where = 'post', label = f'{name2} $S(y)$', color = 'orange')
    s = ax0.step(df2['Z'], ci_greenwood(df2)[0], alpha = 0.75, where = 'post', color = 'red', linestyle = '--')
    s = ax0.step(df2['Z'], ci_greenwood(df2)[1], alpha = 0.75, 
                 where = 'post', color = 'red', label = '95% CI', linestyle = '--')

    s = ax0.axvline(df1_quartile_1, label = f'{name1} 1st Quartile', linestyle = ":", color = 'blue')
    s = ax0.axvline(df2_quartile_1, label = f'{name2} 1st Quartile', linestyle = ":", color = 'orange')

    ax0.tick_params(axis='y')
    ax0.set_xticks([1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37])
    ax0.set_yticks([1, 0.95, 0.90, 0.85, 0.80, 0.75, 0.70, 0.65, 0.60, 0.55, 0.50])
    ax0.set_yticklabels(['1.00', '0.95', '0.90', '0.85', '0.80', '0.75', '0.70', '0.65', '0.60', '0.55', '0.50'])
    ax0.legend(fontsize = 7)

    # Hazard function
    ax1.set_xlabel(r'Months since release')
    ax1.set_ylabel(r'Hazard function, $\lambda(y)$')
    s = ax1.step(df1['Z'], df1['$\lambda(y)$'], alpha = 0.75, where = 'post', label = f'{name1} $\lambda(y)$')
    s = ax1.step(df2['Z'], df2['$\lambda(y)$'], alpha = 0.75, where = 'post', label = f'{name2} $\lambda(y)$')

    ax1.tick_params(axis='y')
    ax1.set_xticks([1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37])
    ax1.legend()

    fig_survival.tight_layout() 